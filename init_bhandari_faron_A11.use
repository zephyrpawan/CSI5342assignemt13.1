model RBAC

-- classes
class User
attributes
  userID : String
operations
  createSession(s : Session)
  deleteSession(s : Session)
  assignRole(r : Role)
  deassignRole(r : Role)
  assignedRoles() : Set(Role)
  authorizedRoles() : Set(Role)
end


class Role
attributes
  name : String
operations
  grantPermission(p : Permission)
  revokePermission(p : Permission)
  checkAccess(obj : Object, op : Operation) : Boolean
  addAscendant(r : Role)
  deleteAscendant(r : Role)
  addDescendant(r : Role)
  deleteDescendant(r : Role)
  addSSDRole(r : Role)
  deleteSSDRole(r : Role)
  addDSDRole(r : Role)
  deleteDSDRole(r : Role)
  assignedUsers() : Set(User)
  authorizedUsers() : Set(User)
  ascendants() : Set(Role)
  descendants() : Set(Role)
  ssdRoles() : Set(Role)
  dsdRoles() : Set(Role)
end


class Session
operations
  addActiveRole(r : Role)
  dropActiveRole(r : Role)
  checkAccess(obj : Object, op : Operation) : Boolean
  invokeOperation(obj : Object, op : Operation)
end


class Permission
operations
  checkAccess(obj : Object, op : Operation) : Boolean
end


class Object
end


class Operation
end


-- associations
association UserAssignment between
  Role[*]
  User[*]
end

association PermAssignment between
  Role[1]
  Permission[0..*]
end

association UserSessions between
  User[1]
  Session[*]
end

association SessionRoles between
  Session[1]
  Role[1..*]
end

association PermObjects between
  Permission[1]
  Object[0..*]
end

association PermOperations between
  Permission[1]
  Operation[1..*]
end

association ExecuteOn between
  Operation[1..*]
  Object[1..*]
end

--association SSD between
--  Role[0..1]
--  Role[0..*]
--end
--
--association DSD between
--  Role[0..1]
--  Role[0..*]
--end
--
--association RoleHierarchy between
--  Role[0..1]
--  Role[0..*]
--end


-- OCL constraints
constraints

context User :: createSession(s : Session)
  post: s.oclIsNew() = true and self.session->includes(s)

context Role :: grantPermission(p : Permission)
  pre: self.permission->excludes(p)
  post: self.permission->includes(p)
--
--context Role :: revokePermission(p : Permission)
--  pre: self.permission->includes(p)
--  post: self.permission->excludes(p)
--
--context Role :: checkAccess(obj : Object, op : Operation) : Boolean
--  post:

