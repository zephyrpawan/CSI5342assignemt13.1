model RBAC

-- classes
-- ***************************************************************
class Role
attributes
  name : String
operations
  grantPermission(p : Permission)
  revokePermission(p : Permission)

  checkAccess(obj : Object, op : Operation) : Boolean =
    self.permission->exists(p | p.operation->includes(op)) and
    self.permission->exists(p | p.object->includes(obj)) and
    op.object->includes(obj)

  addAscendant(r : Role)
  deleteAscendant(r : Role)

  addDescendant(r : Role)
  deleteDescendant(r : Role)

  addSSDRole(r : Role)
  deleteSSDRole(r : Role)

  addDSDRole(r : Role)
  deleteDSDRole(r : Role)

  assignedUsers() : Set(User)
  authorizedUsers() : Set(User)

  ascendants() : Set(Role)
  descendants() : Set(Role)

  ssdRoles() : Set(Role)
  dsdRoles() : Set(Role)
end

-- ***************************************************************
class User
attributes
  userID : String
  name: String
operations
  createSession() : Session
  deleteSession(s : Session)
  assignRole(r : Role)
  deassignRole(r : Role)
  assignedRoles() : Set(Role)
  authorizedRoles() : Set(Role)
end

-- ***************************************************************
class Permission
operations
  checkAccess(obj : Object, op : Operation) : Boolean =
    self.object->includes(obj) and
    self.operation->includes(op) and
    op.object->includes(obj)
end

-- ***************************************************************
class Object
attributes
  name : String
end

-- ***************************************************************
class Operation
attributes
  name : String
end

-- ***************************************************************
class Session
attributes
  name : String
operations
  addActiveRole(r : Role)
  dropActiveRole(r : Role)
  checkAccess(obj : Object, op : Operation) : Boolean =
    self.role.permission->exists(p | p.operation->includes(op)) and
    self.role.permission->exists(p | p.object->includes(obj)) and
    op.object->includes(obj)
  invokeOperation(obj : Object, op : Operation)
end
-- ***************************************************************
class Location
operations
  userLocation(u : User) : Location
  activateLocationByUser(u : User) : Set(Location)
  activateLocationByRole(r : Role) : Set(Location)

  --maps a set of roles to a set of locations from where the role can be activated
  assignLocation(r : Role)

  -- permRoleLoc gives a set of allowable locations for the role associated with a given permission
  permRoleLoc(p : Permission) : Set(Location)

  -- permRoleObj gives a set of allowable locations for the object associated with a given permission
  permObjLoc(p : Permission) : Set(Location)
end
-- ***************************************************************

-- associations
association UserAssignment between
  User[*] role user
  Role[*] role role
end

-- ***************************************************************
association PermAssignment between
  Permission[*] role permission
  Role[*] role role
end

-- ***************************************************************
association UserSessions between
  User[*] role user
  Session[*] role session
end

-- ***************************************************************
association SessionRoles between
  Session[*] role session
  Role[*] role role
end

-- ***************************************************************
association PermObjects between
  Permission[*] role permission
  Object[*] role object
end

-- ***************************************************************
association PermOperations between
  Permission[*] role permission
  Operation[*] role operation
end

-- ***************************************************************
association ExecuteOn between
  Operation[1..*] role operation
  Object[1..*] role object
end

-- ***************************************************************
association RoleHierarchy between
  Role[*] role senior
  Role[*] role junior
end

-- ***************************************************************
association SSD between
  Role[*] role rs1
  Role[*] role rs2
end

-- ***************************************************************
association DSD between
  Role[*] role rd1
  Role[*] role rd2
end

-- ***************************************************************
association UserLocation between
  User[*] role user
  Location[1] role location
end

-- ***************************************************************
association ActivateLocation between
  Role[*] role r1
  Location[1] role l1
end

-- ***************************************************************
association AssignLocation between
  Role[*] role r2
  Location[1] role l2
end

-- ***************************************************************
association PermRoleLoc between
  Location[*] role l1
  Permission[*] role p1
end

-- ***************************************************************
association PermObjLoc between
  Location[*] role l2
  Permission[*] role p2
end

-- ***************************************************************
association ObjLocation between
  Location[1] role location
  Object[*] role object
end

-- ***************************************************************

-- OCL constraints
constraints

context User :: createSession() : Session
  post: result.oclIsNew() = true and self.session->includes(result)

-- Permission can be granted if missing
context Role :: grantPermission(p : Permission)
  pre: self.permission->excludes(p)
  post: self.permission->includes(p)

-- Permission can be removed if present
context Role :: revokePermission(p : Permission)
  pre: self.permission->includes(p)
  post: self.permission->excludes(p)

-- SSD-Role constraint: Conflicting roles cannot be assigned to the same user
context Role
  inv SSDRole:
    rs1.user->excludesAll(rs2.user)

-- SSD-Permission constraint: Conflicting permissions cannot be assigned to the same role.
context Permission
  inv SSDPermission:
    Permission.allInstances->forAll(p1, p2 | p1 <> p2 implies p1.role->excludesAll(p2.role))

-- SSD constraint: A user cannot be assigned to two roles that are involved in an SSD relation
context User
  inv SSDUserConstraint:
    self.role->forAll(r1, r2 | r1.rs1->excludes(r2))

-- DSD constraint. A user cannot activate two roles in DSD relation within a session.
context User
  inv DSDUserConstraint:
    self.session.role->forAll(r1, r2 | r1.rd1->excludes(r2))

-- Hierarchical SSD constraint.
-- There cannot be roles in an SSD relation which have the same senior role.
context Role
 inv HierarchicalSSDConstraint:
   self.senior->forAll(j1, j2 | j1.junior->excludesAll(j2.senior))

-- This precondition is optional as the Permission.checkAccess will return false in this case
--context Permission::checkAccess(obj : Object, op : Operation) : Boolean
--  pre: self.object->includes(obj) and self.operation->includes(op)

-- Each permission must be associated with 1 or more objects and operations
context Permission
  inv minimumOperationsAndObjects:
    self.operation->size() > 0 and self.object->size() > 0

-- Each object must be have at least a permission for 1 operation
context Object
  inv minPermissionOnObject:
    self.permission->size() > 0 and self.operation->size() > 0

-- Each operation must be associated with a permission to be executed on a object
context Operation
 inv minPermissionAndOperations:
   self.permission->size() > 0 and self.object->size() > 0

-- A role must have at least 1 permission and at least 1 user assigned
context Role
  inv minPermission:
    self.permission->size() > 0 and self.user->size() > 0

-- A session can have only 1 user tied to it
context Session
  inv sessionIsFor1SpecificUser:
    self.user->size() = 1

-- pawan
-- TODO: Constraints to add
-- userLocation: all users must be associated with a location (pg. 3)
context User
  inv allUsersMustHaveLocation:
    User.allInstances->forAll(u | u.location->notEmpty())

-- objLocation: all objects are associated with locations and each location associated with an obj must be in an allowable loc (pg. 5)

-- TODO: Operations to add pre/post-conditions for
-- addRoleAssignLocation: pg. 8
-- deleteRoleAssignLocation: pg. 9
-- addRoleActivateLoc: pg. 9
-- deleteRoleActivateLoc: pg. 9

-- sarah
-- addPermission: pg. 10
-- deletePermission: pg. 10
-- assignUser: pg. 11 -- this operations already exists from previous assignment but must be changed
-- createSession: pg. 12 -- this operations already exists from previous assignment but must be changed
-- activateRole: pg. 13 -- this operations already exists from previous assignment but must be changed
-- checkAccess: pg. 13 -- this operations already exists from previous assignment but must be changed
-- activateLocationByUser
-- activateLocationByRole
