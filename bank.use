model RBAC

-- classes

class Role
attributes
  name : String
operations
  grantPermission(p : Permission)
  revokePermission(p : Permission)

  checkAccess(obj : Object, op : Operation) : Boolean

  addInheritance(r: Role)
  deleteInheritance(r: Role)

  checkSSD(r: Role): Boolean
  addSSDRole(r : Role)
  deleteSSDRole(r : Role)

  checkDSD(r: Role): Boolean
  addDSDRole(r : Role)
  deleteDSDRole(r : Role)

--  assignedUsers() : Set(User)
--  authorizedUsers() : Set(User)
--  ascendants() : Set(Role)
--  descendants() : Set(Role)
--  ssdRoles() : Set(Role)
--  dsdRoles() : Set(Role)
end

class User
attributes
  userID : String
  name: String
operations
  createSession(s : Session)
  deleteSession(s : Session)
  assignRole(r : Role)
  deassignRole(r : Role)

--  assignedRoles() : Set(Role)
--  authorizedRoles() : Set(Role)
end

class Permission
operations
  checkAccess(obj : Object, op : Operation) : Boolean
end

class Object
attributes
  name : String
end

class Operation
attributes
  name : String
end

class Session
attributes
  name : String
operations
  addActiveRole(r : Role)
  dropActiveRole(r : Role)
  checkAccess(obj : Object, op : Operation) : Boolean
  invokeOperation(obj : Object, op : Operation)
end

-- associations
association UserAssignment between
  User[1..*] role user
  Role[1..*] role role
end

association PermAssignment between
  Permission[1..*] role permission
  Role[1..*] role role
end

association UserSessions between
  User[1] role user
  Session[1..*] role session
end

association SessionRoles between
  Session[*] role session
  Role[*] role role
end

association PermObjects between
  Permission[1..*] role permission
  Object[1..*] role object
end

association PermOperations between
  Permission[1..*] role permission
  Operation[1..*] role operation
end

association ExecuteOn between
  Operation[*] role operation
  Object[*] role object
end

association RoleHierarchy between
  Role[*] role senior
  Role[*] role junior
end

association SSD between
  Role[*] role rs1
  Role[*] role rs2
end

association DSD between
  Role[*] role rd1
  Role[*] role rd2
end


-- OCL constraints
constraints

context User :: createSession(s : Session)
  post: s.oclIsNew() = true and self.session->includes(s)

context Role :: grantPermission(p : Permission)
  pre: self.permission->excludes(p)
  post: self.permission->includes(p)

-- SSD constraint: A user cannot be assigned to two roles that are involved in an SSD relation
context User
  inv SSDConstraint:
    self.role->forAll(r1, r2 | r1.rs1->excludes(r2))

-- DSD constraint. A user cannot activate two roles in DSD relation within a session.
context User
  inv DSDConstraint:
    self.session.role->forAll(r1, r2 | r1.rd1->excludes(r2))

-- Hierarchical SSD constraint. There cannot be roles in an SSD relation which have the same senior role.
-- Teller & Loan officer cannot be promoted to same senior position TODO
context Role
 inv HierarchicalSSDConstraint:
   self.junior->forAll(j1, j2 | j1.senior->excludesAll(j2.senior))

--
context Permission::checkAccess(obj : Object, op : Operation) : Boolean
  body : true

